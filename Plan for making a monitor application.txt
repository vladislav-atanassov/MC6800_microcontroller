Да се напише приложение, което покрива комуникацията между PC и UART контролера. 
UART се свързва посредством USB към UART адаптер, за да осъществи серийна комуникация през 
клиент, работещ под Windows (като PuTTY).
8 битова комуникация с 1 стоп бит, без parity check (засега).
Да се избере control flow според UART (наи-добре да е чиста серийна комуникация на битове).
Да се избере наи-високият Baud rate, поддържан от контролера (ние сме ограничени до ниска граница).

Етап 1:
Софтуерът от страна на контролера трябва да има възмойнсотта:
	- да изпраща данни към компютър;
	- да получава данни от компютър;

Тест: Да се направи loopback система, която принтира всичко получено.
Да се направи по начин, така че да не се връща обратно всеки символ по отделно, а целият ред,
получен наведнъж.

Етап 2:
В Етап 2 ще се надгради системата, като се добави софтуерен модул в EPROM (наречен монитор), 
които използва комуникацията от Етап 1, за да получава пакет, съдържащ компилирана програма. 
Този модул ще се задейства винаги след RESET и ще очаква да бъде флашната програма.

*При евентуално добавяне на EEPROM/FLASH памет би могло едно GPIO да бъде заделено за определяне 
дали да се задейства монитора или директно да се изпълнява програмата.*

Програмата ще получава пакет с дължината в началото (големината на числото ще бъде съобразена
с наличната памет), самият бинарен код и verification code (може да бъде пропуснат в началото и добавен на по-късен Етап)
Полученият бинарен код ще бъде зареден на фиксиран адрес в SRAM паметта (предстой да се избере, съответно да се остави и място 
за STACK, по-добре STACK да е след програмата или големината на STACK да зависи според големината на програмата)
и след евентуално валидиране на достоверността програмният брояч се мести на адрес 0 от програмата.
За да се рефрешне MCU трябва да се подаде RESET.

При липса на флашната програма би могло да се имплементира мигащ диод, които индикира, че се 
чака програма. 

Докато няма програма, MCU трябва да се намира в режим на изчакване, които продължава, докато не се 
получи индикираща комбинация по UART за старт на операцията. Следва режим на флашване (може да
се индикира от същия диод с различно примигване например) и режим на изпълнение на програмата,
които продължава до RESET. 
При евентуален RETURN от програмата, тя трябва да се стартира от начало.

Тест: да се зареди и изпълнява програма в паметта, която да принтира HELLO WORLD с забавяне от 1 секунда
по UART.

Етап 3: да се напише програма за Windows, която изкарва MCU от режим на изчакване като флашва
програма от файл в паметта автоматично (през CLI).

Етап 4+: да се помисли за създаване на BREAKPOINT логика, която позволява вкарването на контролера
софтуерно в рейим на BREAKPOINT, в който имаме достъп през UART да изпълняваме команди като read/write,
rgister/memory value.

Да се обърне специално внимание на модулярността, преизползването на код и добрите практики.